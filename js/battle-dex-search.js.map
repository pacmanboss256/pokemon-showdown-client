{"version":3,"sources":["../src/battle-dex-search.ts"],"names":["DexSearch","searchType","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","filters","setType","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","toID","getResults","textSearch","addFilter","entry","type","includes","filter","push","removeFilter","filterid","join","deleted","i","length","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","illegalReasons","getTier","searchTypeIndex","typeTable","qFilterType","slice","charAt","toUpperCase","window","BattleTypeChart","getClosest","BattleSearchIndex","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","BattleSearchIndexOffset","charCodeAt","typeName","curBufLength","topbuf","concat","Array","prototype","apply","fType","fId","buf","illegalBuf","BattlePokedex","types","getSpecies","ability","getAbility","name","abilities","hasAbility","BattleMovedex","category","left","right","mid","Math","floor","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","set","formatType","baseResults","baseIllegalResults","sortRow","Number","forGen","endsWith","getDefaultResults","call","getBaseResults","legalityFilter","resultType","value","getTable","illegalResults","result","rowType","sort","firstLearnsetid","speciesid","BattleTeambuilderTable","learnsets","exists","baseLearnsetid","baseSpecies","battleOnly","nextLearnsetid","learnsetid","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","getMove","isNonstandard","genChar","learnset","num","String","table","tableKey","overrideTier","requirePentagon","isDoublesOrBS","tierSet","tiers","map","r","slices","formatSlices","Uber","Regular","OU","UU","RU","NU","PU","ZU","LC","AG","DUber","DOU","DUU","DNU","zuBans","banned","test","row","eggGroups","rowType1","id1","rowType2","id2","stat1","baseStats","stat2","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","name1","name2","Error","BattleAbilities","isHackmons","isAAA","abilitySet","isMega","goodAbilities","poorAbilities","badAbilities","abil","rating","BattleItems","itemSet","items","speciesName","speciesSpecific","getItem","itemUser","moveIsNotUseless","abilityid","itemid","moves","weightkg","evos","GOOD_DOUBLES_MOVES","moveData","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","BAD_STRONG_MOVES","isSTABmons","galarBornLegality","sketchMoves","sketch","learnsetEntry","nonstandardMoves","isMax","isZ","prevoSpecies","excludedForme","s","forme","otherFormes","formeName","usableMoves","uselessMoves","isUsable","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","move1","move2","pow1","pow2","accuracy1","accuracy","accuracy2","pp1","pp","pp2","physical","special","status"],"mappings":"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S,CACuT,WADvT,CACoU,WADpU,CACiV,WADjV,CAC8V,aAD9V,CAC6W,aAD7W,CAC4X,WAD5X,CACyY,aADzY,CACwZ,YADxZ,CACsa,YADta,CACob,WADpb,CACic,UADjc,CAC6c,SAD7c,CACwd,WADxd,CACqe,WADre,CACkf,YADlf,CACggB,WADhgB,CAC6gB,gBAD7gB,CAC+hB,WAD/hB,CAC4iB,UAD5iB,CACwjB,WADxjB,CACqkB,aADrkB,CAColB,YADplB,CACkmB,SADlmB,CAC6mB,aAD7mB,CAC4nB,SAD5nB,CACuoB,SADvoB,CACkpB,aADlpB,CACiqB,MADjqB,CACyqB,MADzqB,CACirB,YADjrB,CAC+rB,OAD/rB,CACwsB,YADxsB,CACstB,WADttB,CACmuB,UADnuB,CAC+uB,aAD/uB,CAC8vB,WAD9vB,CAC2wB,YAD3wB,CACyxB,QADzxB,CACmyB,aADnyB,CACkzB,OADlzB,CAC2zB,aAD3zB,CAC00B,WAD10B,CACu1B,aADv1B,CACs2B,YADt2B,CACo3B,YADp3B,CACk4B,aADl4B,CACi5B,WADj5B,CAC85B,UAD95B,CAC06B,UAD16B,CACs7B,OADt7B,CAC+7B,aAD/7B,CAC88B,OAD98B,CACu9B,aADv9B,CACs+B,WADt+B,CACm/B,OADn/B,CAC4/B,WAD5/B,CACygC,WADzgC,CACshC,MADthC,CAC8hC,MAD9hC,C,CAvM/BtN,gB,CA0MWwN,e,CAAkB,CACjC,YADiC,CACnB,YADmB,CACL,SADK,CACM,WADN,CACmB,YADnB,CACiC,cADjC,CACiD,aADjD,CACgE,WADhE,CAC6E,aAD7E,CAC4F,WAD5F,CACyG,gBADzG,CAC2H,aAD3H,CAC0I,YAD1I,CACwJ,UADxJ,CACoK,QADpK,CAC8K,UAD9K,CAC0L,UAD1L,CACsM,WADtM,CACmN,aADnN,CACkO,WADlO,CAC+O,WAD/O,CAC4P,UAD5P,CACwQ,KADxQ,CAC+Q,SAD/Q,CAC0R,UAD1R,CACsS,aADtS,CACqT,UADrT,CACiU,SADjU,CAC4U,WAD5U,CACyV,YADzV,CACuW,QADvW,CA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","sourcesContent":["/**\r\n * Search\r\n *\r\n * Code for searching for dex information, used by the Dex and\r\n * Teambuilder.\r\n *\r\n * Dependencies: battledata, search-index\r\n * Optional dependencies: pokedex, moves, items, abilities\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ntype SearchType = (\r\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\r\n);\r\n\r\ntype SearchRow = (\r\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\r\n);\r\n\r\ntype SearchFilter = [string, string];\r\n\r\n/** ID, SearchType, index (if alias), offset (if offset alias) */\r\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\r\ndeclare const BattleSearchIndexOffset: any;\r\ndeclare const BattleTeambuilderTable: any;\r\n\r\n/**\r\n * Backend for search UIs.\r\n */\r\nclass DexSearch {\r\n\tquery = '';\r\n\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\r\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\r\n\r\n\tresults: SearchRow[] | null = null;\r\n\texactMatch = false;\r\n\r\n\tstatic typeTable = {\r\n\t\tpokemon: 1,\r\n\t\ttype: 2,\r\n\t\ttier: 3,\r\n\t\tmove: 4,\r\n\t\titem: 5,\r\n\t\tability: 6,\r\n\t\tegggroup: 7,\r\n\t\tcategory: 8,\r\n\t\tarticle: 9,\r\n\t};\r\n\tstatic typeName = {\r\n\t\tpokemon: 'Pok&eacute;mon',\r\n\t\ttype: 'Type',\r\n\t\ttier: 'Tiers',\r\n\t\tmove: 'Moves',\r\n\t\titem: 'Items',\r\n\t\tability: 'Abilities',\r\n\t\tegggroup: 'Egg group',\r\n\t\tcategory: 'Category',\r\n\t\tarticle: 'Article',\r\n\t};\r\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\r\n\r\n\t/**\r\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\r\n\t * things are according to the base filters, falling back to dex number (for\r\n\t * Pokemon) and name (for everything else).\r\n\t */\r\n\tsortCol: string | null = null;\r\n\r\n\t/**\r\n\t * Filters for the search result. Does not include the two base filters\r\n\t * (format and species).\r\n\t */\r\n\tfilters: SearchFilter[] | null = null;\r\n\r\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\r\n\t\tthis.setType(searchType, formatid, species);\r\n\t}\r\n\r\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tif (!searchType) return null;\r\n\t\tswitch (searchType) {\r\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\r\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\r\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\r\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\r\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\r\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfind(query: string) {\r\n\t\tquery = toID(query);\r\n\t\tif (this.query === query && this.results) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.query = query;\r\n\t\tif (!query) {\r\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol) || [];\r\n\t\t} else {\r\n\t\t\tthis.results = this.textSearch(query);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\t// invalidate caches\r\n\t\tthis.results = null;\r\n\r\n\t\tif (searchType !== this.typedSearch?.searchType) {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis.sortCol = null;\r\n\t\t}\r\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\r\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\r\n\t}\r\n\r\n\taddFilter(entry: SearchFilter): boolean {\r\n\t\tif (!this.typedSearch) return false;\r\n\t\tlet [type] = entry;\r\n\t\tif (this.typedSearch.searchType === 'pokemon') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\r\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.results = null;\r\n\t\t\tfor (const filter of this.filters) {\r\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\treturn true;\r\n\t\t} else if (this.typedSearch.searchType === 'move') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\r\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\tthis.results = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFilter(entry?: SearchFilter): boolean {\r\n\t\tif (!this.filters) return false;\r\n\t\tif (entry) {\r\n\t\t\tconst filterid = entry.join(':');\r\n\t\t\tlet deleted: string[] | null = null;\r\n\t\t\t// delete specific filter\r\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\r\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\r\n\t\t\t\t\tdeleted = this.filters[i];\r\n\t\t\t\t\tthis.filters.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!deleted) return false;\r\n\t\t} else {\r\n\t\t\tthis.filters.pop();\r\n\t\t}\r\n\t\tif (!this.filters.length) this.filters = null;\r\n\t\tthis.results = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttoggleSort(sortCol: string) {\r\n\t\tif (this.sortCol === sortCol) {\r\n\t\t\tthis.sortCol = null;\r\n\t\t} else {\r\n\t\t\tthis.sortCol = sortCol;\r\n\t\t}\r\n\t\tthis.results = null;\r\n\t}\r\n\r\n\tfilterLabel(filterType: string) {\r\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\r\n\t\t\treturn 'Filter';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tillegalLabel(id: ID) {\r\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\r\n\t}\r\n\r\n\tgetTier(species: Species) {\r\n\t\treturn this.typedSearch?.getTier(species) || '';\r\n\t}\r\n\r\n\ttextSearch(query: string): SearchRow[] {\r\n\t\tquery = toID(query);\r\n\r\n\t\tthis.exactMatch = false;\r\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\r\n\r\n\t\t// If searchType exists, we're searching mainly for results of that type.\r\n\t\t// We'll still search for results of other types, but those results\r\n\t\t// will only be used to filter results for that type.\r\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\r\n\r\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\r\n\t\tlet qFilterType: 'type' | '' = '';\r\n\t\tif (query.slice(-4) === 'type') {\r\n\t\t\tif ((query.charAt(0).toUpperCase() + query.slice(1, -4)) in window.BattleTypeChart) {\r\n\t\t\t\tquery = query.slice(0, -4);\r\n\t\t\t\tqFilterType = 'type';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// i represents the location of the search index we're looking at\r\n\t\tlet i = DexSearch.getClosest(query);\r\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\r\n\r\n\t\t// Even with output buffer buckets, we make multiple passes through\r\n\t\t// the search index. searchPasses is a queue of which pass we're on:\r\n\t\t// [passType, i, query]\r\n\r\n\t\t// By doing an alias pass after the normal pass, we ensure that\r\n\t\t// mid-word matches only display after start matches.\r\n\t\tlet passType: SearchPassType | '' = '';\r\n\t\t/**\r\n\t\t * pass types:\r\n\t\t * * '': time to pop the next pass off the searchPasses queue\r\n\t\t * * 'normal': start at i and stop when results no longer start with query\r\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\r\n\t\t * * 'fuzzy': start at i and stop when you have two results\r\n\t\t * * 'exact': like normal, but stop at i\r\n\t\t */\r\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\r\n\t\t/**\r\n\t\t * [passType, i, query]\r\n\t\t *\r\n\t\t * i = index of BattleSearchIndex to start from\r\n\t\t *\r\n\t\t * By doing an alias pass after the normal pass, we ensure that\r\n\t\t * mid-word matches only display after start matches.\r\n\t\t */\r\n\t\ttype SearchPass = [SearchPassType, number, string];\r\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\r\n\r\n\t\t// For performance reasons, only do an alias pass if query is at\r\n\t\t// least 2 chars long\r\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\r\n\r\n\t\t// If the query matches an official alias in BattleAliases: These are\r\n\t\t// different from the aliases in the search index and are given\r\n\t\t// higher priority. We'll do a normal pass through the index with\r\n\t\t// the alias text before any other passes.\r\n\t\tlet queryAlias;\r\n\t\tif (query in BattleAliases) {\r\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\r\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\r\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\r\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\r\n\t\t\t}\r\n\t\t\tthis.exactMatch = true;\r\n\t\t}\r\n\r\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\r\n\t\t// Fuzzy matches will still be shown after alias matches\r\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\r\n\t\t\t// No results start with this. Do a fuzzy match pass.\r\n\t\t\tlet matchLength = query.length - 1;\r\n\t\t\tif (!i) i++;\r\n\t\t\twhile (matchLength &&\r\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\r\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\r\n\t\t\t\tmatchLength--;\r\n\t\t\t}\r\n\t\t\tlet matchQuery = query.substr(0, matchLength);\r\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\r\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\r\n\t\t}\r\n\r\n\t\t// We split the output buffers into 8 buckets.\r\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\r\n\t\t// pokemon, types, moves, etc (see typeTable).\r\n\r\n\t\t// When we're done, the buffers are concatenated together to form\r\n\t\t// our results, with each buffer getting its own header, unlike\r\n\t\t// multiple-pass results, which have no header.\r\n\r\n\t\t// Notes:\r\n\t\t// - if we have a searchType, that searchType's buffer will be on top\r\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\r\n\t\tlet topbufIndex = -1;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet nearMatch = false;\r\n\r\n\t\t/** [type, id, typeIndex] */\r\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\r\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\r\n\t\t// We aren't actually looping through the entirety of the searchIndex\r\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\r\n\t\t\tif (!passType) {\r\n\t\t\t\tlet searchPass = searchPasses.shift();\r\n\t\t\t\tif (!searchPass) break;\r\n\t\t\t\tpassType = searchPass[0];\r\n\t\t\t\ti = searchPass[1];\r\n\t\t\t\tquery = searchPass[2];\r\n\t\t\t}\r\n\r\n\t\t\tlet entry = BattleSearchIndex[i];\r\n\t\t\tlet id = entry[0];\r\n\t\t\tlet type = entry[1];\r\n\r\n\t\t\tif (!id) break;\r\n\r\n\t\t\tif (passType === 'fuzzy') {\r\n\t\t\t\t// fuzzy match pass; stop after 2 results\r\n\t\t\t\tif (count >= 2) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tnearMatch = true;\r\n\t\t\t} else if (passType === 'exact') {\r\n\t\t\t\t// exact pass; stop after 1 result\r\n\t\t\t\tif (count >= 1) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (id.substr(0, query.length) !== query) {\r\n\t\t\t\t// regular pass, time to move onto our next match\r\n\t\t\t\tpassType = '';\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.length > 2) {\r\n\t\t\t\t// alias entry\r\n\t\t\t\tif (passType !== 'alias') continue;\r\n\t\t\t} else {\r\n\t\t\t\t// normal entry\r\n\t\t\t\tif (passType === 'alias') continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\r\n\r\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\r\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\r\n\r\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\r\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\r\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 8) continue;\r\n\t\t\t// For move queries, accept types/categories as filters\r\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\r\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\r\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\r\n\t\t\t// For ability/item queries, don't accept anything else as a filter\r\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\r\n\t\t\t// Query was a type name followed 'type'; only show types\r\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\r\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\r\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\r\n\r\n\t\t\tlet matchStart = 0;\r\n\t\t\tlet matchEnd = 0;\r\n\t\t\tif (passType === 'alias') {\r\n\t\t\t\t// alias entry\r\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\r\n\t\t\t\tmatchStart = entry[3]!;\r\n\t\t\t\tlet originalIndex = entry[2]!;\r\n\t\t\t\tif (matchStart) {\r\n\t\t\t\t\tmatchEnd = matchStart + query.length;\r\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t}\r\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\r\n\t\t\t} else {\r\n\t\t\t\tmatchEnd = query.length;\r\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t}\r\n\r\n\t\t\t// some aliases are substrings\r\n\t\t\tif (queryAlias === id && query !== id) continue;\r\n\r\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\r\n\t\t\t\t// This is a filter, set it as an instafilter candidate\r\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\r\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// show types above Arceus formes\r\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\r\n\t\t\t\ttopbufIndex = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\r\n\t\t\t\t// Always show illegal results under legal results.\r\n\t\t\t\t// This is done by putting legal results (and the type header)\r\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\r\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\r\n\t\t\t\t// illegal results will be seamlessly right under legal results.\r\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\r\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tif (!bufs[typeIndex].length) {\r\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't match duplicate aliases\r\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\r\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\r\n\r\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\r\n\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tlet topbuf: SearchRow[] = [];\r\n\t\tif (nearMatch) {\r\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\r\n\t\t}\r\n\t\tif (topbufIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\r\n\t\t\tbufs[topbufIndex] = [];\r\n\t\t}\r\n\t\tif (searchTypeIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\r\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\r\n\t\t\tbufs[searchTypeIndex] = [];\r\n\t\t\tbufs[0] = [];\r\n\t\t}\r\n\r\n\t\tif (instafilter && count < 20) {\r\n\t\t\t// Result count is less than 20, so we can instafilter\r\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\r\n\t\t}\r\n\r\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\r\n\t\treturn this.results;\r\n\t}\r\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\r\n\t\tlet buf: SearchRow[] = [];\r\n\t\tlet illegalBuf: SearchRow[] = [];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\t\tif (searchType === 'pokemon') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\r\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\r\n\t\t\t\t\tif (this.dex.getSpecies(id).types.includes(type)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tlet ability = Dex.getAbility(fId).name;\r\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\r\n\t\t\t\t\tif (Dex.hasAbility(this.dex.getSpecies(id), ability)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (searchType === 'move') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${category} moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...buf, ...illegalBuf];\r\n\t}\r\n\r\n\tstatic getClosest(query: string) {\r\n\t\t// binary search through the index!\r\n\t\tlet left = 0;\r\n\t\tlet right = BattleSearchIndex.length - 1;\r\n\t\twhile (right > left) {\r\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\r\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\r\n\t\t\t\t// that's us\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\r\n\t\t\t\tleft = mid + 1;\r\n\t\t\t} else {\r\n\t\t\t\tright = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\r\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\r\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nabstract class BattleTypedSearch<T extends SearchType> {\r\n\tsearchType: T;\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\t/**\r\n\t * Format is the first of two base filters. It constrains results to things\r\n\t * legal in the format, and affects the default sort.\r\n\t *\r\n\t * This string specifically normalizes out generation number and the words\r\n\t * \"Doubles\" and \"Let's Go\" from the name.\r\n\t */\r\n\tformat = '' as ID;\r\n\t/**\r\n\t * `species` is the second of two base filters. It constrains results to\r\n\t * things that species can use, and affects the default sort.\r\n\t */\r\n\tspecies = '' as ID;\r\n\t/**\r\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\r\n\t * (Abilities/items can affect what moves are sorted as usable.)\r\n\t */\r\n\tset: PokemonSet | null = null;\r\n\r\n\tprotected formatType: 'doubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' | 'dlc1' | 'dlc1doubles' | null = null;\r\n\r\n\t/**\r\n\t * Cached copy of what the results list would be with only base filters\r\n\t * (i.e. with an empty `query` and `filters`)\r\n\t */\r\n\tbaseResults: SearchRow[] | null = null;\r\n\t/**\r\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\r\n\t * is wondering why a specific result isn't showing up.\r\n\t */\r\n\tbaseIllegalResults: SearchRow[] | null = null;\r\n\tillegalReasons: {[id: string]: string} | null = null;\r\n\tresults: SearchRow[] | null = null;\r\n\r\n\tprotected readonly sortRow: SearchRow | null = null;\r\n\r\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tthis.searchType = searchType;\r\n\r\n\t\tthis.baseResults = null;\r\n\t\tthis.baseIllegalResults = null;\r\n\r\n\t\tif (format.slice(0, 3) === 'gen') {\r\n\t\t\tconst gen = (Number(format.charAt(3)) || 6);\r\n\t\t\tformat = (format.slice(4) || 'customgame') as ID;\r\n\t\t\tthis.dex = Dex.forGen(gen);\r\n\t\t} else if (!format) {\r\n\t\t\tthis.dex = Dex;\r\n\t\t}\r\n\r\n\t\tif (format.startsWith('dlc1')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'dlc1doubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'dlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format === 'vgc2020') this.formatType = 'dlc1doubles';\r\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\r\n\t\tif (format.includes('letsgo')) this.formatType = 'letsgo';\r\n\t\tif (format.includes('nationaldex')) {\r\n\t\t\tformat = format.slice(11) as ID;\r\n\t\t\tthis.formatType = 'natdex';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\r\n\t\tif (format.includes('metronome')) {\r\n\t\t\tthis.formatType = 'metronome';\r\n\t\t}\r\n\t\tif (format.endsWith('nfe')) {\r\n\t\t\tformat = format.slice(3) as ID;\r\n\t\t\tthis.formatType = 'nfe';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tthis.format = format;\r\n\r\n\t\tthis.species = '' as ID;\r\n\t\tthis.set = null;\r\n\t\tif (typeof speciesOrSet === 'string') {\r\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\r\n\t\t} else {\r\n\t\t\tthis.set = speciesOrSet as PokemonSet;\r\n\t\t\tthis.species = toID(this.set.species);\r\n\t\t}\r\n\t\tif (!searchType || !this.set) return;\r\n\t}\r\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null): SearchRow[] {\r\n\t\tif (sortCol === 'type') {\r\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'category') {\r\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'ability') {\r\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\r\n\t\t}\r\n\r\n\t\tif (!this.baseResults) {\r\n\t\t\tthis.baseResults = this.getBaseResults();\r\n\t\t}\r\n\r\n\t\tif (!this.baseIllegalResults) {\r\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\r\n\t\t\tfor (const [resultType, value] of this.baseResults) {\r\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\r\n\t\t\t}\r\n\t\t\tthis.baseIllegalResults = [];\r\n\t\t\tthis.illegalReasons = {};\r\n\r\n\t\t\tfor (const id in this.getTable()) {\r\n\t\t\t\tif (!(id in legalityFilter)) {\r\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\r\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet results: SearchRow[];\r\n\t\tlet illegalResults: SearchRow[] | null;\r\n\r\n\t\tif (filters) {\r\n\t\t\tresults = [];\r\n\t\t\tillegalResults = [];\r\n\t\t\tfor (const result of this.baseResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\r\n\t\t\t\t\t\tresults[results.length - 1] = result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\r\n\t\t\t\tresults.pop();\r\n\t\t\t}\r\n\t\t\tfor (const result of this.baseIllegalResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tillegalResults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresults = [...this.baseResults];\r\n\t\t\tillegalResults = null;\r\n\t\t}\r\n\r\n\t\tif (sortCol) {\r\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\tresults = this.sort(results, sortCol);\r\n\t\t\tif (illegalResults) {\r\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortRow) {\r\n\t\t\tresults = [this.sortRow, ...results];\r\n\t\t}\r\n\t\tif (illegalResults && illegalResults.length) {\r\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprotected firstLearnsetid(speciesid: ID) {\r\n\t\tif (speciesid in BattleTeambuilderTable.learnsets) return speciesid;\r\n\t\tconst species = this.dex.getSpecies(speciesid);\r\n\t\tif (!species.exists) return '' as ID;\r\n\r\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\r\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\r\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\r\n\t\t}\r\n\t\tif (baseLearnsetid in BattleTeambuilderTable.learnsets) return baseLearnsetid;\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\r\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\r\n\t\t\treturn 'rockruffdusk' as ID;\r\n\t\t}\r\n\t\tconst lsetSpecies = this.dex.getSpecies(learnsetid);\r\n\t\tif (!lsetSpecies.exists) return '' as ID;\r\n\r\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\r\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\r\n\r\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\r\n\t\tif (next) return toID(next);\r\n\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected canLearn(speciesid: ID, moveid: ID) {\r\n\t\tif (this.dex.gen >= 8 && this.dex.getMove(moveid).isNonstandard === 'Past' && this.formatType !== 'natdex') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet genChar = `${this.dex.gen}`;\r\n\t\tif (\r\n\t\t\tthis.format.startsWith('vgc') ||\r\n\t\t\tthis.format.startsWith('battlespot') ||\r\n\t\t\tthis.format.startsWith('battlestadium')\r\n\t\t) {\r\n\t\t\tif (this.dex.gen === 8) {\r\n\t\t\t\tgenChar = 'g';\r\n\t\t\t} else if (this.dex.gen === 7) {\r\n\t\t\t\tgenChar = 'q';\r\n\t\t\t} else if (this.dex.gen === 6) {\r\n\t\t\t\tgenChar = 'p';\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (learnset && (moveid in learnset) && learnset[moveid].includes(genChar)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetTier(pokemon: Species) {\r\n\t\tif (this.formatType === 'metronome' || this.formatType === 'natdex') {\r\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\r\n\t\t}\r\n\t\tlet table = window.BattleTeambuilderTable;\r\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${this.dex.gen}doubles` :\r\n\t\t\tthis.formatType === 'letsgo' ? 'letsgo' :\r\n\t\t\tthis.formatType === 'nfe' ? `gen${this.dex.gen}nfe` :\r\n\t\t\tthis.formatType === 'dlc1' ? 'gen8dlc1' :\r\n\t\t\tthis.formatType === 'dlc1doubles' ? 'gen8dlc1doubles' :\r\n\t\t\t`gen${this.dex.gen}`;\r\n\t\tif (table && table[tableKey]) {\r\n\t\t\ttable = table[tableKey];\r\n\t\t}\r\n\t\tif (!table) return pokemon.tier;\r\n\r\n\t\tlet id = pokemon.id;\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\tif (id.slice(-5) === 'totem' && id.slice(0, -5) in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\r\n\t\t}\r\n\t\tid = toID(pokemon.baseSpecies);\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\r\n\t\treturn pokemon.tier;\r\n\t}\r\n\tabstract getTable(): {[id: string]: any};\r\n\tabstract getDefaultResults(): SearchRow[];\r\n\tabstract getBaseResults(): SearchRow[];\r\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\r\n\tabstract sort(input: SearchRow[], sortCol: string): SearchRow[];\r\n}\r\n\r\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\r\n\tsortRow: SearchRow = ['sortpokemon', ''];\r\n\tgetTable() {\r\n\t\treturn BattlePokedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tfor (let id in BattlePokedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bulbasaur':\r\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chikorita':\r\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'treecko':\r\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'turtwig':\r\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'victini':\r\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chespin':\r\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rowlet':\r\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grookey':\r\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'missingno':\r\n\t\t\t\tresults.push(['header', \"Glitch\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tomohawk':\r\n\t\t\t\tresults.push(['header', \"CAP\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pikachucosplay':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['pokemon', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tconst format = this.format;\r\n\t\tif (!format) return this.getDefaultResults();\r\n\t\tconst requirePentagon = format === 'battlespotsingles' || format === 'battledoubles' || format.startsWith('vgc');\r\n\t\tlet isDoublesOrBS = this.formatType === 'doubles';\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (format.endsWith('cap') || format.endsWith('caplc')) {\r\n\t\t\t// CAP formats always use the singles table\r\n\t\t\tif (dex.gen < 8) {\r\n\t\t\t\ttable = table['gen' + dex.gen];\r\n\t\t\t}\r\n\t\t} else if (dex.gen === 7 && requirePentagon) {\r\n\t\t\ttable = table['gen' + dex.gen + 'vgc'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (table['gen' + dex.gen + 'doubles'] && dex.gen > 4 && this.formatType !== 'letsgo' && this.formatType !== 'dlc1doubles' &&\r\n\t\t\t(\r\n\t\t\tformat.includes('doubles') || format.includes('vgc') || format.includes('triples') ||\r\n\t\t\tformat.endsWith('lc') || format.endsWith('lcuu')\r\n\t\t)) {\r\n\t\t\ttable = table['gen' + dex.gen + 'doubles'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (dex.gen < 8 && !this.formatType) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (this.formatType === 'letsgo') {\r\n\t\t\ttable = table['letsgo'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['metronome'];\r\n\t\t} else if (this.formatType === 'nfe') {\r\n\t\t\ttable = table['gen' + dex.gen + 'nfe'];\r\n\t\t} else if (this.formatType?.startsWith('dlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen8dlc1doubles'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen8dlc1'];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!table.tierSet) {\r\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.tiers = null;\r\n\t\t}\r\n\t\tlet tierSet: SearchRow[] = table.tierSet;\r\n\t\tlet slices: {[k: string]: number} = table.formatSlices;\r\n\t\tif (format === 'ubers' || format === 'uber') tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (format === 'vgc2017') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'vgc2018') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format.startsWith('vgc2019')) tierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\r\n\t\telse if (format === 'battlespotsingles') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'battlespotdoubles') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'ou') tierSet = tierSet.slice(slices.OU);\r\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\r\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\r\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.UU);\r\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\r\n\t\telse if (format === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))) tierSet = tierSet.slice(slices.LC);\r\n\t\telse if (format === 'cap') tierSet = tierSet.slice(0, slices.Uber).concat(tierSet.slice(slices.OU));\r\n\t\telse if (format === 'caplc') tierSet = tierSet.slice(slices['CAP LC'], slices.Uber).concat(tierSet.slice(slices.LC));\r\n\t\telse if (format === 'anythinggoes' || format.endsWith('ag')) tierSet = tierSet.slice(slices.AG);\r\n\t\telse if (format === 'balancedhackmons' || format.endsWith('bh')) tierSet = tierSet.slice(slices.AG);\r\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\r\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\r\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\r\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\r\n\t\telse if (this.formatType === 'letsgo') tierSet = tierSet.slice(slices.Uber);\r\n\t\t// else if (isDoublesOrBS) tierSet = tierSet;\r\n\t\telse if (!isDoublesOrBS) {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\r\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\r\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\r\n\t\t\t\t...tierSet.slice(slices.UU),\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\r\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\r\n\t\t\t\t...tierSet.slice(slices.DUU),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tif (format === 'zu' && dex.gen >= 7) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.zuBans) return false;\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (format === 'vgc2016') {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tlet banned = [\r\n\t\t\t\t\t'deoxys', 'deoxysattack', 'deoxysdefense', 'deoxysspeed', 'mew', 'celebi', 'shaymin', 'shayminsky', 'darkrai', 'victini', 'keldeo', 'keldeoresolute', 'meloetta', 'arceus', 'genesect', 'jirachi', 'manaphy', 'phione', 'hoopa', 'hoopaunbound', 'diancie', 'dianciemega',\r\n\t\t\t\t];\r\n\t\t\t\treturn !(banned.includes(id) || id.startsWith('arceus'));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Filter out Gmax Pokemon from standard tier selection\r\n\t\tif (!/^(battlestadium|vgc|doublesubers)/g.test(format)) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (type === 'pokemon') return !id.endsWith('gmax');\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn tierSet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'pokemon') return true;\r\n\t\tconst species = this.dex.getSpecies(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'egggroup':\r\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tier':\r\n\t\t\t\tif (this.getTier(species) !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'move':\r\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string) {\r\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst stat1 = BattlePokedex[id1].baseStats[sortCol as StatName];\r\n\t\t\t\tconst stat2 = BattlePokedex[id2].baseStats[sortCol as StatName];\r\n\t\t\t\treturn stat2 - stat1;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'bst') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst base1 = BattlePokedex[id1].baseStats;\r\n\t\t\t\tconst base2 = BattlePokedex[id2].baseStats;\r\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\r\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\r\n\t\t\t\treturn bst2 - bst1;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'name') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn name1 < name2 ? -1 : name1 > name2 ? 1 : 0;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\r\n\tgetTable() {\r\n\t\treturn BattleAbilities;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in BattleAbilities) {\r\n\t\t\tresults.push(['ability', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.getSpecies(this.species);\r\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\r\n\r\n\t\tif (species.isMega) {\r\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\tspecies = dex.getSpecies(species.baseSpecies);\r\n\t\t}\r\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\r\n\t\tif (species.abilities['1']) {\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\r\n\t\t}\r\n\t\tif (species.abilities['H']) {\r\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\r\n\t\t}\r\n\t\tif (species.abilities['S']) {\r\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\r\n\t\t}\r\n\t\tif (isAAA || format === 'metronomebattle' || isHackmons) {\r\n\t\t\tlet abilities: ID[] = [];\r\n\t\t\tfor (let i in this.getTable()) {\r\n\t\t\t\tconst ability = dex.getAbility(i);\r\n\t\t\t\tif (ability.isNonstandard) continue;\r\n\t\t\t\tif (ability.gen > dex.gen) continue;\r\n\t\t\t\tabilities.push(ability.id);\r\n\t\t\t}\r\n\r\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\r\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\r\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\r\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.getAbility(abil))) {\r\n\t\t\t\tlet rating = ability.rating;\r\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\r\n\t\t\t\tif (rating >= 3) {\r\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else if (rating >= 2) {\r\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\r\n\t\t\tif (species.isMega) {\r\n\t\t\t\tif (isAAA) {\r\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\t\t}\r\n\t\t\t\t// species is unused after this, so no need to replace\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilitySet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.getAbility(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.getSpecies(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\r\n\tgetTable() {\r\n\t\treturn BattleItems;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.dex.gen < 8) {\r\n\t\t\ttable = table['gen' + this.dex.gen];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['metronome'];\r\n\t\t}\r\n\t\tif (!table.itemSet) {\r\n\t\t\ttable.itemSet = table.items.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') {\r\n\t\t\t\t\treturn ['item', r];\r\n\t\t\t\t}\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.items = null;\r\n\t\t}\r\n\t\treturn table.itemSet;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst speciesName = this.dex.getSpecies(this.species).name;\r\n\t\tconst results = this.getDefaultResults();\r\n\t\tconst speciesSpecific: SearchRow[] = [];\r\n\t\tfor (const row of results) {\r\n\t\t\tif (row[0] !== 'item') continue;\r\n\t\t\tif (this.dex.getItem(row[1]).itemUser?.includes(speciesName)) {\r\n\t\t\t\tspeciesSpecific.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (speciesSpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', \"Specific to \" + speciesName],\r\n\t\t\t\t...speciesSpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.getAbility(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.getSpecies(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\r\n\tsortRow: SearchRow = ['sortmove', ''];\r\n\tgetTable() {\r\n\t\treturn BattleMovedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tresults.push(['header', \"Moves\"]);\r\n\t\tfor (let id in BattleMovedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'paleowave':\r\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magikarpsrevenge':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['move', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprivate moveIsNotUseless(id: ID, species: Species, abilityid: ID, itemid: ID, moves: string[]) {\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tif (dex.gen === 1) {\r\n\t\t\t// Usually not useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Usually useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'disable', 'firepunch', 'icepunch', 'leechseed', 'quickattack', 'roar', 'thunderpunch', 'toxic', 'triattack', 'whirlwind',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Not useless only when certain moves aren't present\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\r\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\r\n\t\t\tcase 'doublekick': return !moves.includes('submission');\r\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\r\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\r\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\r\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'letsgo') {\r\n\t\t\tif (id === 'megadrain') return true;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\tif (id === 'metronome') return true;\r\n\t\t}\r\n\r\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\r\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\r\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\r\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\r\n\r\n\t\tswitch (id) {\r\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\r\n\t\t\treturn abilityid !== 'sheerforce';\r\n\t\tcase 'solarbeam': case 'solarblade':\r\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll'].includes(abilityid) || itemid === 'powerherb';\r\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\r\n\t\t\treturn abilityid === 'noguard';\r\n\t\tcase 'heatcrash': case 'heavyslam':\r\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\r\n\r\n\t\tcase 'aerialace':\r\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\r\n\t\tcase 'ancientpower':\r\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\r\n\t\tcase 'aurawheel':\r\n\t\t\treturn species.baseSpecies === 'Morpeko';\r\n\t\tcase 'bellydrum':\r\n\t\t\treturn moves.includes('aquajet') || moves.includes('extremespeed') ||\r\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\r\n\t\tcase 'bulletseed':\r\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\r\n\t\tcase 'counter':\r\n\t\t\treturn species.baseStats.hp >= 65;\r\n\t\tcase 'darkvoid':\r\n\t\t\treturn dex.gen < 7;\r\n\t\tcase 'drainingkiss':\r\n\t\t\treturn abilityid === 'triage';\r\n\t\tcase 'dualwingbeat':\r\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\r\n\t\tcase 'feint':\r\n\t\t\treturn abilityid === 'refrigerate';\r\n\t\tcase 'grassyglide':\r\n\t\t\treturn abilityid === 'grassysurge';\r\n\t\tcase 'gyroball':\r\n\t\t\treturn species.baseStats.spe <= 60;\r\n\t\tcase 'headbutt':\r\n\t\t\treturn abilityid === 'serenegrace';\r\n\t\tcase 'hiddenpowerelectric':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\r\n\t\tcase 'hiddenpowerfighting':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\r\n\t\tcase 'hiddenpowerfire':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower');\r\n\t\tcase 'hiddenpowergrass':\r\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\r\n\t\tcase 'hiddenpowerice':\r\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) || (dex.gen > 5 && !moves.includes('aurorabeam'));\r\n\t\tcase 'hiddenpowerflying':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\r\n\t\tcase 'hiddenpowerbug':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\r\n\t\tcase 'hiddenpowerpsychic':\r\n\t\t\treturn species.baseSpecies === 'Unown';\r\n\t\tcase 'hyperspacefury':\r\n\t\t\treturn species.id === 'hoopaunbound';\r\n\t\tcase 'hypnosis':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\r\n\t\tcase 'icywind':\r\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\r\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\r\n\t\tcase 'infestation':\r\n\t\t\treturn moves.includes('stickyweb');\r\n\t\tcase 'irontail':\r\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'jumpkick':\r\n\t\t\treturn !moves.includes('highjumpkick');\r\n\t\tcase 'leechlife':\r\n\t\t\treturn dex.gen > 6;\r\n\t\tcase 'mysticalfire':\r\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\r\n\t\tcase 'naturepower':\r\n\t\t\treturn dex.gen === 5;\r\n\t\tcase 'nightslash':\r\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\r\n\t\tcase 'petaldance':\r\n\t\t\treturn abilityid === 'owntempo';\r\n\t\tcase 'phantomforce':\r\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\r\n\t\tcase 'poisonfang':\r\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'relicsong':\r\n\t\t\treturn species.id === 'meloetta';\r\n\t\tcase 'refresh':\r\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\r\n\t\tcase 'risingvoltage':\r\n\t\t\treturn abilityid === 'electricsurge';\r\n\t\tcase 'rocktomb':\r\n\t\t\treturn abilityid === 'technician';\r\n\t\tcase 'selfdestruct':\r\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\r\n\t\tcase 'shadowpunch':\r\n\t\t\treturn abilityid === 'ironfist';\r\n\t\tcase 'smackdown':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'smartstrike':\r\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\r\n\t\tcase 'soak':\r\n\t\t\treturn abilityid === 'unaware';\r\n\t\tcase 'steelwing':\r\n\t\t\treturn !moves.includes('ironhead');\r\n\t\tcase 'stompingtantrum':\r\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\r\n\t\tcase 'stunspore':\r\n\t\t\treturn !moves.includes('thunderwave');\r\n\t\tcase 'technoblast':\r\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\r\n\t\tcase 'teleport':\r\n\t\t\treturn dex.gen > 7;\r\n\t\tcase 'terrainpulse': case 'waterpulse':\r\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\r\n\t\tcase 'trickroom':\r\n\t\t\treturn species.baseStats.spe <= 100;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst moveData = BattleMovedex[id];\r\n\t\tif (!moveData) return true;\r\n\t\tif (moveData.category === 'Status') {\r\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (moveData.basePower < 75) {\r\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (id === 'skydrop') return true;\r\n\t\t// strong moves\r\n\t\tif (moveData.flags?.charge) {\r\n\t\t\treturn itemid === 'powerherb';\r\n\t\t}\r\n\t\tif (moveData.flags?.recharge) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\r\n\t}\r\n\tstatic readonly GOOD_STATUS_MOVES = [\r\n\t\t'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'drainingkiss', 'encore', 'extremeevoboost', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'irondefense', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'roar', 'rockpolish', 'roost', 'shellsmash', 'shiftgear', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'toxic', 'toxicspikes', 'transform', 'trick', 'whirlwind', 'willowisp', 'wish', 'yawn',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_WEAK_MOVES = [\r\n\t\t'accelerock', 'acrobatics', 'aquajet', 'avalanche', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'endeavor', 'facade', 'firefang', 'flipturn', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'hex', 'icefang', 'iceshard', 'iciclespear', 'knockoff', 'lowkick', 'machpunch', 'nightshade', 'nuzzle', 'pikapapow', 'psychocut', 'pursuit', 'quickattack', 'rapidspin', 'return', 'rockblast', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'tripleaxel', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly BAD_STRONG_MOVES = [\r\n\t\t'beakblast', 'belch', 'burnup', 'crushclaw', 'doomdesire', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'futuresight', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'lastresort', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_DOUBLES_MOVES = [\r\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\r\n\t] as ID[] as readonly ID[];\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.getSpecies(this.species);\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\r\n\t\tconst galarBornLegality = (format.includes('battlestadium') || format.startsWith('vgc') && this.dex.gen === 8);\r\n\r\n\t\tconst abilityid = this.set ? toID(this.set.ability) : '' as ID;\r\n\t\tconst itemid = this.set ? toID(this.set.item) : '' as ID;\r\n\r\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\r\n\t\tlet moves: string[] = [];\r\n\t\tlet sketchMoves: string[] = [];\r\n\t\tlet sketch = false;\r\n\t\tlet gen = '' + dex.gen;\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (this.formatType === 'letsgo') learnset = BattleTeambuilderTable['letsgo'].learnsets[learnsetid];\r\n\t\t\tif (this.formatType?.startsWith('dlc1')) learnset = BattleTeambuilderTable['gen8dlc1'].learnsets[learnsetid];\r\n\t\t\tif (learnset) {\r\n\t\t\t\tfor (let moveid in learnset) {\r\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\r\n\t\t\t\t\t/* if (requirePentagon && learnsetEntry.indexOf('p') < 0) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} */\r\n\t\t\t\t\tif (galarBornLegality && !learnsetEntry.includes('g')) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else if (!learnsetEntry.includes(gen)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.gen >= 8 && BattleMovedex[moveid].isNonstandard === \"Past\" && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (this.formatType?.startsWith('dlc1') && BattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)) continue;\r\n\t\t\t\t\tif (moves.includes(moveid)) continue;\r\n\t\t\t\t\tmoves.push(moveid);\r\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\r\n\t\t\t\t\tif (moveid === 'hiddenpower') {\r\n\t\t\t\t\t\tmoves.push(\r\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id);\r\n\t\t}\r\n\t\tif (sketch || isHackmons) {\r\n\t\t\tif (isHackmons) moves = [];\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\r\n\t\t\t\tconst move = dex.getMove(id);\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (sketch) {\r\n\t\t\t\t\tif (move.isMax || move.isZ || move.isNonstandard) continue;\r\n\t\t\t\t\tsketchMoves.push(move.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\r\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex' && dex.gen === 8) continue;\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\r\n\t\tif (isSTABmons) {\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tlet types: string[] = [];\r\n\t\t\t\tlet baseSpecies = dex.getSpecies(species.changesFrom || species.name);\r\n\t\t\t\tif (!species.battleOnly) types.push(...species.types);\r\n\t\t\t\tlet prevo = species.prevo;\r\n\t\t\t\twhile (prevo) {\r\n\t\t\t\t\tconst prevoSpecies = dex.getSpecies(prevo);\r\n\t\t\t\t\ttypes.push(...prevoSpecies.types);\r\n\t\t\t\t\tprevo = prevoSpecies.prevo;\r\n\t\t\t\t}\r\n\t\t\t\tif (species.battleOnly) species = baseSpecies;\r\n\t\t\t\tconst excludedForme = (s: Species) => ['Alola', 'Alola-Totem', 'Galar', 'Galar-Zen'].includes(s.forme);\r\n\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\r\n\t\t\t\t\tif (!excludedForme(species)) types.push(...baseSpecies.types);\r\n\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\r\n\t\t\t\t\t\tconst forme = dex.getSpecies(formeName);\r\n\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) types.push(...forme.types);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst move = Dex.getMove(id);\r\n\t\t\t\tif (!types.includes(move.type)) continue;\r\n\t\t\t\tif (moves.includes(move.id)) continue;\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (move.isZ || move.isMax || move.isNonstandard) continue;\r\n\t\t\t\tmoves.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmoves.sort();\r\n\t\tsketchMoves.sort();\r\n\r\n\t\tlet usableMoves: SearchRow[] = [];\r\n\t\tlet uselessMoves: SearchRow[] = [];\r\n\t\tfor (const id of moves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, moves);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sketchMoves.length) {\r\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\r\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\r\n\t\t}\r\n\t\tfor (const id of sketchMoves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, sketchMoves);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...usableMoves, ...uselessMoves];\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'move') return true;\r\n\t\tconst move = this.dex.getMove(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (move.type !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tif (move.category !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string): SearchRow[] {\r\n\t\tswitch (sortCol) {\r\n\t\tcase 'power':\r\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\r\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\r\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\r\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\r\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\r\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\r\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\r\n\t\t\t};\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet move1 = BattleMovedex[id1];\r\n\t\t\t\tlet move2 = BattleMovedex[id2];\r\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\r\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\r\n\t\t\t\treturn pow2 - pow1;\r\n\t\t\t});\r\n\t\tcase 'accuracy':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet accuracy1 = BattleMovedex[id1].accuracy || 0;\r\n\t\t\t\tlet accuracy2 = BattleMovedex[id2].accuracy || 0;\r\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\r\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\r\n\t\t\t\treturn accuracy2 - accuracy1;\r\n\t\t\t});\r\n\t\tcase 'pp':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pp1 = BattleMovedex[id1].pp || 0;\r\n\t\t\t\tlet pp2 = BattleMovedex[id2].pp || 0;\r\n\t\t\t\treturn pp2 - pp1;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\r\n\tgetTable() {\r\n\t\treturn {physical: 1, special: 1, status: 1};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\treturn [\r\n\t\t\t['category', 'physical' as ID],\r\n\t\t\t['category', 'special' as ID],\r\n\t\t\t['category', 'status' as ID],\r\n\t\t];\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\r\n\tgetTable() {\r\n\t\treturn window.BattleTypeChart;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in window.BattleTypeChart) {\r\n\t\t\tresults.push(['type', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n"],"file":"battle-dex-search.js"}